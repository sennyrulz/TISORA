import React, { useState } from "react";
import { Container, Row, Col, Form, Button, Image } from "react-bootstrap";
import image1 from "../assets/American_Express.png";
import image2 from "../assets/Diners_Club.png";
import image3 from "../assets/mastercard.png";
import image4 from "../assets/Visa.png";

const Checkout = () => {
  const [formData, setFormData] = useState({
    email: "",
    country: "",
    firstName: "",
    lastName: "",
    address: "",
    apartment: "",
    city: "",
    state: "",
    postalCode: "",
    phone: "",
    shippingMethod: "standard",
    saveInfo: false,
    emailOffers: false,
    billingSameAsShipping: true,
    cardNumber: "",
    cardExpiry: "",
    cardCvc: "",
    cardName: "",
  });

  const [errors, setErrors] = useState({});

  const cartItems = [
    { id: 1, name: "Black T-Shirt", price: 5000, quantity: 1, image: "/shirt.jpg", size: "M" },
    { id: 2, name: "Blue Jeans", price: 12000, quantity: 1, image: "/jeans.jpg", size: "32" },
  ];

  // Calculate total dynamically
  const calculateTotal = () => {
    return cartItems.reduce((total, item) => total + item.price * item.quantity, 0);
  };

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData({
      ...formData,
      [name]: type === "checkbox" ? checked : value,
    });
  };

  // Simple validation example
  const validate = () => {
    const newErrors = {};
    if (!formData.email) newErrors.email = "Email is required";
    if (!formData.firstName) newErrors.firstName = "First name is required";
    if (!formData.lastName) newErrors.lastName = "Last name is required";
    if (!formData.address) newErrors.address = "Address is required";
    if (!formData.city) newErrors.city = "City is required";
    if (!formData.state) newErrors.state = "State is required";
    if (!formData.phone) newErrors.phone = "Phone is required";
    if (!formData.cardNumber) newErrors.cardNumber = "Card number is required";
    if (!formData.cardExpiry) newErrors.cardExpiry = "Expiration date is required";
    if (!formData.cardCvc) newErrors.cardCvc = "Security code is required";
    if (!formData.cardName) newErrors.cardName = "Name on card is required";

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (!validate()) return;
    console.log("Form Data Submitted:", formData);
    alert("Order Placed! Proceeding to payment...");
  };

  return (
    <Container style={{ marginTop: "100px", marginBottom: "100px", paddingTop: "20px" }}>
      <Row className="justify-content-center">
        {/* Left Column - Form */}
        <Col md={7} className="pe-5">
          {/* Contact Section */}
          <Row className="justify-content-between mb-2">
            <Col className="text-start"><h5>Contact</h5></Col>
            <Col className="text-end">
              <a href="/login" className="text-decoration-underline" style={{ color: "black" }}>Log in</a>
            </Col>
          </Row>

          <Form.Group className="mb-3" controlId="email">
            <Form.Control
              type="email"
              placeholder="Email"
              name="email"
              value={formData.email}
              onChange={handleChange}
              isInvalid={!!errors.email}
            />
            <Form.Control.Feedback type="invalid">{errors.email}</Form.Control.Feedback>
          </Form.Group>

          <Form.Group className="mb-4" controlId="emailOffers">
            <Form.Check
              type="checkbox"
              label="Email me with news & offers"
              name="emailOffers"
              checked={formData.emailOffers}
              onChange={handleChange}
            />
          </Form.Group>

          {/* Delivery Section */}
          <h5 className="mb-3 text-start">Delivery</h5>

          <Form.Group className="mb-3" controlId="country">
            <Form.Select
              name="country"
              value={formData.country}
              onChange={handleChange}
              isInvalid={!!errors.country}
            >
              <option value="" disabled>Country/Region</option>
              <option value="NG">Nigeria</option>
              <option value="USA">USA</option>
              <option value="UK">UK</option>
              <option value="CA">Canada</option>
            </Form.Select>
            <Form.Control.Feedback type="invalid">{errors.country}</Form.Control.Feedback>
          </Form.Group>

          <Row className="mb-3">
            <Col>
              <Form.Control
                type="text"
                placeholder="First Name"
                name="firstName"
                value={formData.firstName}
                onChange={handleChange}
                isInvalid={!!errors.firstName}
              />
              <Form.Control.Feedback type="invalid">{errors.firstName}</Form.Control.Feedback>
            </Col>
            <Col>
              <Form.Control
                type="text"
                placeholder="Last Name"
                name="lastName"
                value={formData.lastName}
                onChange={handleChange}
                isInvalid={!!errors.lastName}
              />
              <Form.Control.Feedback type="invalid">{errors.lastName}</Form.Control.Feedback>
            </Col>
          </Row>

          <Form.Group className="mb-3" controlId="address">
            <Form.Control
              type="text"
              placeholder="Address"
              name="address"
              value={formData.address}
              onChange={handleChange}
              isInvalid={!!errors.address}
            />
            <Form.Control.Feedback type="invalid">{errors.address}</Form.Control.Feedback>
          </Form.Group>

          <Form.Group className="mb-3" controlId="apartment">
            <Form.Control
              type="text"
              placeholder="Apartment, suite, etc. (optional)"
              name="apartment"
              value={formData.apartment}
              onChange={handleChange}
            />
          </Form.Group>

          <Row className="mb-3">
            <Col>
              <Form.Control
                type="text"
                placeholder="City"
                name="city"
                value={formData.city}
                onChange={handleChange}
                isInvalid={!!errors.city}
              />
              <Form.Control.Feedback type="invalid">{errors.city}</Form.Control.Feedback>
            </Col>
            <Col>
              <Form.Select
                name="state"
                value={formData.state}
                onChange={handleChange}
                isInvalid={!!errors.state}
              >
                <option value="" disabled>State</option>
                <option value="Lagos">Lagos</option>
                <option value="Kano">Kano</option>
                <option value="Abuja">Abuja</option>
                <option value="Imo">Imo</option>
              </Form.Select>
              <Form.Control.Feedback type="invalid">{errors.state}</Form.Control.Feedback>
            </Col>
            <Col>
              <Form.Control
                type="text"
                placeholder="Postal Code (optional)"
                name="postalCode"
                value={formData.postalCode}
                onChange={handleChange}
              />
            </Col>
          </Row>

          <Form.Group className="mb-4" controlId="phone">
            <Form.Control
              type="text"
              placeholder="Phone"
              name="phone"
              value={formData.phone}
              onChange={handleChange}
              isInvalid={!!errors.phone}
            />
            <Form.Control.Feedback type="invalid">{errors.phone}</Form.Control.Feedback>
          </Form.Group>

          {/* Shipping Method */}
          <h5 className="mb-3 text-start">Shipping Method</h5>

          {["standard", "oneDay", "express"].map((method, idx) => {
            const labelMap = {
              standard: "Standard Shipping (3-5 business days)",
              oneDay: "One-Day Shipping (1 business day)",
              express: "Express Shipping (2-3 business days)",
            };
            return (
              <Form.Group className="mb-3" key={idx} controlId={`shipping-${method}`}>
                <Form.Check
                  type="radio"
                  label={labelMap[method]}
                  name="shippingMethod"
                  value={method}
                  checked={formData.shippingMethod === method}
                  onChange={handleChange}
                />
              </Form.Group>
            );
          })}

          <Form.Group className="mb-4" controlId="saveInfo">
            <Form.Check
              type="checkbox"
              label="Save this information for next time"
              name="saveInfo"
              checked={formData.saveInfo}
              onChange={handleChange}
            />
          </Form.Group>

          {/* Payment Section */}
          <h5 className="mb-3 text-start">Payment</h5>
          <p className="text-start">All transactions are secured & encrypted</p>

          <Row className="border p-2 rounded mb-4" style={{ backgroundColor: "#f0f0f0" }}>
            <Row className="mb-3 justify-content-between">
              <Col><h6 className="text-start fw-normal mt-2">Credit Card</h6></Col>
              <Col className="text-end">
                <Image src={image1} alt="American Express" style={{ width: "40px" }} />
                <Image src={image2} alt="Diners Club" style={{ width: "40px" }} />
                <Image src={image3} alt="Mastercard" style={{ width: "40px" }} />
                <Image src={image4} alt="Visa" style={{ width: "40px" }} />
              </Col>
            </Row>

            <Form.Group className="mb-3" controlId="cardNumber">
              <Form.Control
                type="text"
                placeholder="Card Number"
                name="cardNumber"
                value={formData.cardNumber}
                onChange={handleChange}
                isInvalid={!!errors.cardNumber}
              />
              <Form.Control.Feedback type="invalid">{errors.cardNumber}</Form.Control.Feedback>
            </Form.Group>

            <Row className="mb-3">
              <Col>
                <Form.Control
                  type="text"
                  placeholder="Expiration Date (MM/YY)"
                  name="cardExpiry"
                  value={formData.cardExpiry}
                  onChange={handleChange}
                  isInvalid={!!errors.cardExpiry}
                />
                <Form.Control.Feedback type="invalid">{errors.cardExpiry}</Form.Control.Feedback>
              </Col>
              <Col>
                <Form.Control
                  type="text"
                  placeholder="Security Code"
                  name="cardCvc"
                  value={formData.cardCvc}
                  onChange={handleChange}
                  isInvalid={!!errors.cardCvc}
                />
                <Form.Control.Feedback type="invalid">{errors.cardCvc}</Form.Control.Feedback>
              </Col>
            </Row>

            <Form.Group className="mb-4" controlId="cardName">
              <Form.Control
                type="text"
                placeholder="Name on Card"
                name="cardName"
                value={formData.cardName}
                onChange={handleChange}
                isInvalid={!!errors.cardName}
              />
              <Form.Control.Feedback type="invalid">{errors.cardName}</Form.Control.Feedback>
            </Form.Group>

            <Form.Group className="mb-4" controlId="billingSameAsShipping">
              <Form.Check
                type="checkbox"
                label="Billing address same as shipping"
                name="billingSameAsShipping"
                checked={formData.billingSameAsShipping}
                onChange={handleChange}
              />
            </Form.Group>
          </Row>

          {/* Place Order Button */}
          <Button
            type="submit"
            className="w-100"
            onClick={handleSubmit}
            style={{ backgroundColor: "#000", borderColor: "#000" }}
          >
            Place order
          </Button>
        </Col>

        {/* Right Column - Order Summary */}
        <Col md={5} className="px-3">
          <h5 className="text-start mb-3">Order summary</h5>

          {cartItems.map((item) => (
            <Row key={item.id} className="mb-3 align-items-center">
              <Col xs={4}>
                <img src={item.image} alt={item.name} style={{ width: "100%" }} />
              </Col>
              <Col xs={8}>
                <p className="mb-0 fw-semibold text-start">{item.name}</p>
                <p className="mb-0 text-start">Size: {item.size}</p>
                <p className="mb-0 text-start">
                  Price: ₦{item.price.toLocaleString()} x {item.quantity}
                </p>
              </Col>
            </Row>
          ))}

          <hr />

          <Row className="mb-2">
            <Col className="text-start fw-semibold">Subtotal</Col>
            <Col className="text-end">₦{calculateTotal().toLocaleString()}</Col>
          </Row>

          <Row className="mb-2">
            <Col className="text-start fw-semibold">Shipping</Col>
            <Col className="text-end">
              {formData.shippingMethod === "standard" && "₦0 (Standard Shipping)"}
              {formData.shippingMethod === "oneDay" && "₦5,000 (One-Day Shipping)"}
              {formData.shippingMethod === "express" && "₦7,500 (Express Shipping)"}
            </Col>
          </Row>

          <hr />

          <Row>
            <Col className="text-start fw-bold fs-5">Total</Col>
            <Col className="text-end fs-5 fw-bold">
              ₦
              {(
                calculateTotal() +
                (formData.shippingMethod === "oneDay"
                  ? 5000
                  : formData.shippingMethod === "express"
                  ? 7500
                  : 0)
              ).toLocaleString()}
            </Col>
          </Row>
        </Col>
      </Row>
    </Container>
  );
};

export default Checkout;
